# -*- coding: utf-8 -*-
"""Python for DevOps.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y4h8pxtbfWyGEyjMKEdLKH8WbV7BWjVu

# **Python for DevOps**

![Python for DevOps](https://images-na.ssl-images-amazon.com/images/I/51pv-GUo2DL._SX379_BO1,204,203,200_.jpg)

## Pragmatic AI Labs

![alt text](https://paiml.com/images/logo_with_slogan_white_background.png)

This notebook was produced by [Pragmatic AI Labs](https://paiml.com/).  You can continue learning about these topics by:


*   Buying a copy of [Python for DevOps:  Learn Ruthlessly Effective Automation](https://www.amazon.com/Python-DevOps-Ruthlessly-Effective-Automation/dp/149205769X)
*   Buying a copy of [Pragmatic AI: An Introduction to Cloud-Based Machine Learning](http://www.informit.com/store/pragmatic-ai-an-introduction-to-cloud-based-machine-9780134863917)

*   Reading an online copy of [Python for DevOps: Learn Ruthlessly Effective Automation](https://learning.oreilly.com/library/view/python-for-devops/9781492057680/)
*   Reading an online copy of [Pragmatic AI: An Introduction to Cloud-Based Machine Learning](https://www.safaribooksonline.com/library/view/pragmatic-ai-an/9780134863924/)

*   Viewing more content at [noahgift.com](https://noahgift.com/)

### Additional Related Topics from Noah Gift

His most recent books are:

*   [Pragmatic A.I.:   An introduction to Cloud-Based Machine Learning (Pearson, 2018)](https://www.amazon.com/Pragmatic-AI-Introduction-Cloud-Based-Analytics/dp/0134863860)
*   [Python for DevOps (O'Reilly, 2020)](https://www.amazon.com/Python-DevOps-Ruthlessly-Effective-Automation/dp/149205769X). 

His most recent video courses are:

*   [Essential Machine Learning and A.I. with Python and Jupyter Notebook LiveLessons (Pearson, 2018)](https://learning.oreilly.com/videos/essential-machine-learning/9780135261118)
*   [AWS Certified Machine Learning-Specialty (ML-S) (Pearson, 2019)](https://learning.oreilly.com/videos/aws-certified-machine/9780135556597)
*   [Python for Data Science Complete Video Course Video Training (Pearson, 2019)](https://learning.oreilly.com/videos/python-for-data/9780135687253)
*   [AWS Certified Big Data - Specialty Complete Video Course and Practice Test Video Training (Pearson, 2019)](https://learning.oreilly.com/videos/aws-certified-big/9780135772324)
*   [Building A.I. Applications on Google Cloud Platform (Pearson, 2019)](https://learning.oreilly.com/videos/building-ai-applications/9780135973462)
*   [Pragmatic AI and Machine Learning Core Principles (Pearson, 2019)](https://learning.oreilly.com/videos/pragmatic-ai-and/9780136554714)
*   [Data Engineering with Python and AWS Lambda (Pearson, 2019)](https://learning.oreilly.com/videos/data-engineering-with/9780135964330)

His most recent online courses are:

*   [Microservices with this Udacity DevOps Nanodegree (Udacity, 2019)](https://www.udacity.com/course/cloud-dev-ops-nanodegree--nd9991)
*   [Command Line Automation in Python (DataCamp, 2019)](https://www.datacamp.com/instructors/ndgift)

## Introduction to Python for DevOps

### Presentation: What is DevOps anyway?

According to AWS these are [DevOps Practices](https://aws.amazon.com/devops/what-is-devops/):

* Continuous Integration
* Continuous Delivery
* Microservices
* Monitoring and Logging (Use Data to make decisions)
* Communication and Collaboration

### Using IPython, Jupyter, Colab and Python executable

#### Using IPython

Very similar to Jupyter, but run from terminal:

*   IPython predates Jupyter
*   Both Jupyter and IPython accept *!ls -l* format to execute shell commands
"""

!ls -l

var = !ls -l
type(var)

#var.fields?

var.grep("data")

"""#### Jupyter Notebook


Many flavors of Jupyter Notebook.  A few popular ones:

* ![Jupyter](https://user-images.githubusercontent.com/58792/40282633-395be25c-5c27-11e8-9e40-357ea4216562.png)
* ![JupyterHug](https://user-images.githubusercontent.com/58792/40282632-387efe32-5c27-11e8-9f02-6f95f2fee223.png)
* ![Colab](https://user-images.githubusercontent.com/58792/40282631-384f8cf6-5c27-11e8-9209-3f0d22de0d81.png)
* ![Kaggle](https://user-images.githubusercontent.com/58792/40282634-3985c3a6-5c27-11e8-8c53-06fbdedce847.png)
* ![Sagemaker](https://user-images.githubusercontent.com/58792/40282635-39a3bdd4-5c27-11e8-81d5-6533a3b84771.png)

#### Hosted Commercial Flavors

* [Google Colaboratory](https://colab.research.google.com/notebook):  Free
* [Kaggle](https://www.kaggle.com/):  Free


#### Pure Open Source

* [Jupyter](http://jupyter.org/) standalone, original
* [JupyterHub](https://github.com/jupyterhub/jupyterhub) multi-user, docker friendly

#### Hybrid Solutions

* Running Jupyter on [AWS Spot Instances](https://aws.amazon.com/ec2/spot/)
* [Google Data Lab](https://cloud.google.com/datalab/)
* [Azure Data Science Virtual Machines](https://azure.microsoft.com/en-us/services/virtual-machines/data-science-virtual-machines/)
* [AWS Sagemaker](https://aws.amazon.com/sagemaker/)
* [Azure Machine Learning Studio](https://studio.azureml.net/)

#### Colab Notebook Key Features

* [12.1 Perform Colaboratory basics ](https://www.safaribooksonline.com/videos/essential-machine-learning/9780135261118/9780135261118-EMLA_01_12_01)

* [12.2 Use Advanced Colab Features](https://www.safaribooksonline.com/videos/essential-machine-learning/9780135261118/9780135261118-EMLA_01_12_02)

*  Can enable both TPU and GPU runtimes
*  Can upload regular Jupyter Notebooks into colab
*  Can have a Google Drive Full of Colab Notebooks
*  Can sync colab notebooks to Github.  Here is an example of a [gist of this notebook](https://gist.github.com/noahgift/c69200e05c057cf239fc7ea0be62e043)
*  Can connect to a [local runtime](https://research.google.com/colaboratory/local-runtimes.html)
* Can create [forms in Colab](https://colab.research.google.com/notebooks/forms.ipynb)

##### Mount GDrive
"""

from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)

import os;os.listdir("/content/gdrive/My Drive/awsml")

"""#### Magic Commands

##### %timeit
"""

# Commented out IPython magic to ensure Python compatibility.
too_many_decimals = 1.912345897

print("built in Python Round")
# %timeit round(too_many_decimals, 2)

"""##### %alias"""

alias lscsv ls -l sample_data/*.csv

lscsv

"""[Reference These]
https://ipython.readthedocs.io/en/stable/interactive/magics.html

##### %who

Print variables
"""

var1=1

who

too_many_decimals

"""##### %writefile"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile magic_stuff.py
# import pandas as pd
# df = pd.read_csv(
#     "https://raw.githubusercontent.com/noahgift/food/master/data/features.en.openfoodfacts.org.products.csv")
# df.drop(["Unnamed: 0", "exceeded", "g_sum", "energy_100g"], axis=1, inplace=True) #drop two rows we don't need
# df = df.drop(df.index[[1,11877]]) #drop outlier
# df.rename(index=str, columns={"reconstructed_energy": "energy_100g"}, inplace=True)
# print(df.head())

cat magic_stuff.py

!python magic_stuff.py

!pip install -q pylint

!pylint magic_stuff.py

"""##### Bash"""

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# uname -a
# ls
# ps

!uname -a

"""##### Python2"""

# Commented out IPython magic to ensure Python compatibility.
# %%python2
# print "old school"

"""##### HTML"""

# Commented out IPython magic to ensure Python compatibility.
# %%html
# <h1>Only The Best Tags and People</h>

"""##### Upload to Colab"""

!pip install --upgrade -q gspread

from google.colab import auth
auth.authenticate_user()

import gspread
from oauth2client.client import GoogleCredentials

gc = gspread.authorize(GoogleCredentials.get_application_default())

worksheet = gc.open('DevOp-Wonder').sheet1

# get_all_values gives a list of rows.
rows = worksheet.get_all_values()
print(rows)

# Convert to a DataFrame and render.
import pandas as pd
pd.DataFrame.from_records(rows)

"""Upload your file here (request.csv)"""

from google.colab import files
uploaded = files.upload()

!ls -l

import pandas as pd
df = pd.read_csv("automl-tables_notebooks_census_income.csv")
df.head(2)

import pandas as pd
df = pd.read_csv("https://raw.githubusercontent.com/noahgift/sugar/master/data/education_sugar_cdc_2003.csv")
df.head()

df.describe()

"""##### Forms in Colab"""

Use_Python = True #@param ["False", "True"] {type:"raw"}

print(f"You select it is {Use_Python} you use Python")

"""#### Python executable

Can run scripts, REPL and even run python statements with -c flag and semicolon to string together multiple statements
"""

!python -c "import os;print(os.listdir())"

!ls -l

!pip install -q boto3

#this is how you capture input to a program
import sys;sys.argv

"""### Introductory Concepts
*  **Procedural Statements**
*  Strings and String Formatting
*  Numbers and Arithmetic Operations
*  Data Structures

#### Procedural Statements
 Procedural statements are literally statements that  can be issued one line at a time.  Below are types of procedural statements.  These statements can be run in:
 * Jupyter Notebook
 * IPython shell
 * Python interpreter
 * Python scripts

**Printing**
"""

print("Hello world")

"""**Create Variable and Use Variable**"""

variable = "armbar"
variable

"""**Multiple procedural statements**"""

attack_one = "kimura"
attack_two = "arm triangle"
print("In Brazilian Jiu Jitsu a common attack is a:", attack_one)
print("Another common attack is a:", attack_two)

"""**Adding Numbers**"""

1+1

"""**Adding Phrases**"""

"arm" + " bar"+" 4"+" morestuff " + "lemon"

"""**Complex statements**

More complex statements can be created that use data structures like the belts variable, which is a list.
"""

belts = ["white", "blue", "purple", "brown", "black"]
for belt in belts:
    if "black" in belt:
        print("The belt I want to be is:", belt)
    else:
        print("This is not the belt I want to end up at:", belt)

"""#### Strings and String Formatting

Strings are a sequence of characters and they are often programmatically formatted.  Almost all Python programs have strings because they can be used to send messages to users who use the program.  When creating strings there are few core concepts to understand:

* Strings can be create with the single, double and triple/double quotes
* Strings are can be formatted
* One complication of strings is they can be encoded in several formats including unicode
* Many methods are available to operate on strings.  In an editor or IPython shell you can see these methods by tab completion: 
```
basic_string.
            capitalize()   format()       islower()      lower()        rpartition()   title()         
            casefold()     format_map()   isnumeric()    lstrip()       rsplit()       translate()     
            center()       index()        isprintable()  maketrans()    rstrip()       upper()         
            count()        isalnum()      isspace()      partition()    split()        zfill()         
            encode()       isalpha()      istitle()      replace()      splitlines()                  
            endswith()     isdecimal()    isupper()      rfind()        startswith()                  
            expandtabs()   isdigit()      join()         rindex()       strip()                       
            find()         isidentifier() ljust()        rjust()        swapcase()        
```
"""

my_string = "this is a string I am using this time"
my_string.split()
#my_string.upper()
#my_string.title()
#my_string.count("this")

my_string.capitalize()

my_string.isnumeric()

print(my_string)
var2 = my_string.swapcase()
print(var2)
print(var2.swapcase())

"""**Basic String**"""

basic_string = "Brazilian Jiu Jitsu"

"""**Splitting String**

Turn a string in a list by splitting on spaces, or some other thing
"""

#split on spaces (default)
basic_string.split()

result = basic_string.split()
len(result)

#split on hyphen
string_with_hyphen = "Brazilian-Jiu-Jitsu"
string_with_hyphen.split("-")

#split on comma
string_with_hyphen = "Brazilian,Jiu,Jitsu"
string_with_hyphen.split(",")

"""**All Capital**

Turn a string into all Capital Letter
"""

basic_string.capitalize()

"""**Slicing Strings**

Strings can be referenced by length and sliced
"""

#Get the last character
basic_string[-1:]

len(basic_string[2:])

#Get length of string
len(basic_string)

basic_string[-18:]

"""**Strings Can Be Added Together**"""

basic_string + " is my favorite Martial Art"

items = ["-",1,2,3]
for item in items:
  basic_string += str(item)
basic_string

"this is a string format: %s" % "wow"

"""**F-Strings Can Be Formatted in More Complex Ways**

One of the best ways to format a string in modern Python 3 is to use f-strings
"""

f'I love practicing my favorite Martial Art, {basic_string}'

"""**Strings Can Use Triple Quotes to Wrap**"""

f"""
This phrase is multiple sentenances long.
There phrase can be formatted like simpler sentances,
for example, I can still talk about my favorite Martial Art {basic_string}
"""

"""**Line Breaks Can Be Removed with Replace**

The last long line contained line breaks, which are the **\n** character, and they can be removed by using the replace method
"""

f"""
This phrase is multiple sentenances long.
There phrase can be formatted like simpler sentances,
for example, I can still talk about my favorite Martial Art {basic_string}
""".replace("\n", " ")

"""#### Numbers and Arithmetic Operations

Python is also a built-in calculator. Without installing any additional libraries it can do many simple and complex arithmetic operations.

**Adding and Subtracting Numbers**
"""

steps = (1+1)-1
print(f"Two Steps Forward:  One Step Back = {steps}")

"""**Multiplication with Decimals**

Can use float type to solve decimal problems
"""

body_fat_percentage = 0.10
weight = 200
fat_total = body_fat_percentage * weight
print(f"I weight 200lbs, and {fat_total}lbs of that is fat")

"""Can also use Decimal Library to set precision and deal with repeating decimal"""

from decimal import (Decimal, getcontext)

getcontext().prec = 3
Decimal(1)/Decimal(3)

"""**Using Exponents**

Using the Python math library it is straightforward to call 2 to the 3rd power
"""

import math
math.pow(2,4)

"""Can also use built in exponent operator to accomplish same thing"""

2**3

2**4

"""this is regular multiplication"""

2*3

"""**Converting Between different numerical types**

There are many numerical forms to be aware of in Python.
A couple of the most common are:

* Integers
* Floats
"""

number = 100
num_type = type(number).__name__
print(f"{number} is type [{num_type}]")

number = float(100)
num_type = type(number).__name__
print(f"{number} is type [{num_type}]")

num2 = 100.20
type(num2)

class Foo:pass
f = Foo()

type(f)

"""**Numbers can also be rounded**

Python Built in round
"""

too_many_decimals = 1.912345897
round(too_many_decimals, 6)
#get more info
#round?

"""Numpy round"""

import numpy as np
np.round(too_many_decimals, 6)

"""Pandas round"""

import pandas as pd
df = pd.DataFrame([too_many_decimals], columns=["A"], index=["first"])
df.round(2)

"""Simple benchmark of all three (**Python**, **numpy** and **Pandas** round):   using **%timeit**

*Depending on what is getting rounded (i.e. a very large DataFrame, performance may very, so knowing how to benchmark performance is important with round) *
"""

# Commented out IPython magic to ensure Python compatibility.
print("built in Python Round")
# %timeit round(too_many_decimals, 2)

print("numpy round")
# %timeit np.round(too_many_decimals, 2)

print("Pandas DataFrame round")
# %timeit df.round(2)

"""### Presentation: Lists and Dictionaries
Python has a couple of core Data Structures that are used very frequently

* Lists
* Dictionaries

Dictionaries and lists are the real workhorses of Python, but there are also other Data Structers like tuples, sets, Counters, etc, that are worth exploring too.

#### Python Dictionaries

The workhorse of Python datastructures

##### Creating Python Dictionaries

Creating Python Dictionaries can be done with* brackets {}*
"""

#bad_dictionary = {[2]:"one"}

new_dictionary = {"one":1}

submissions = {"armbar": "upper_body", 
               "arm_triangle": "upper_body", 
               "heel_hook": "lower_body", 
               "knee_bar": "lower_body"}
#type(submissions)
#submissions.items?
submissions

new_dict =dict(upper_body="lower_body")
new_dict

"""##### Using Python Dictionaries
A common dictionary usage pattern is to *iterate* on a dictionary by using the items method. In the example below the key and the value are printed:
"""

#submissions.items?

for submission, body_part in submissions.items():
    print(f"The {submission} is an attack on the {body_part}")

"""Dictionaries can also be used to *filter*.  In the example below, only the submission attacks on the lower body are displayed:"""

for _, body_parts in submissions.items():
  print(body_parts)

print(f"These are lower_body submission attacks in Brazilian Jiu Jitsu:")
for submission, body_part in submissions.items():
    if body_part == "lower_body":
        print(submission)

"""Dictionary keys and values can also be selected with built in *keys() * and *values()* methods"""

print(f"These are keys: {submissions.keys()}")
print(f"These are values: {submissions.values()}")

"""Key lookup is very performant, and one of the most common ways to use a dictionary."""

if "armbar" in submissions:
  print("found key")

# Commented out IPython magic to ensure Python compatibility.
print("timing key membership")
# %timeit if "armbar" in submissions: pass

"""#### Python Lists

Lists are also very commonly used in Python. They allow for sequential collections. Lists can hold dictionaries, just as dictionaries can hold lists.

##### Creating Lists

One way to create lists is with *[] syntax*
"""

list_of_bjj_positions = ["mount", "full-guard", "half-guard", 
                         "turtle", "side-control", "rear-mount", 
                         "knee-on-belly", "north-south", "open-guard"]

"""Another method os creating lists is with built in *list()* method"""

bjj_dominant_positions = list()
bjj_dominant_positions.append("side-control")
bjj_dominant_positions.append("mount")
bjj_dominant_positions

"""Yet another way, very performant way to create lists is to use list comprehension syntax"""

guards = "full, half, open"
guard_list = [f"{guard}-guard" for guard in guards.split(",")]
guard_list

"""##### Using Lists

For loops are one of the simplist ways to use a list.
"""

for position in list_of_bjj_positions:
    if "open" in position: #explore on your own "guard"
        print(position)

"""Lists can also be used to select elements by slicing."""

print(f'First position: {list_of_bjj_positions[:1]}')
print(f'Last position: {list_of_bjj_positions[-1:]}')
print(f'First three positions: {list_of_bjj_positions[0:3]}')

"""Lists can also be used to unpack powerful, succinct statements when used with built-in functions like zip."""

bjj_position_matrix = [
    ["dominant", "top-mount", "back-mount", "side-control"],
    ["neutral", "open-guard", "full-guard", "standing"],
    ["weak", "turtle", "bottom-back-mount", "bottom-mount"]
]
list(zip(*bjj_position_matrix))

zip?

"""#### Python Sets

Sets are unordered unique collections

##### Creating Python Sets

Sets can be created by using built-in *sets()* method
"""

unique_attacks = set(("armbar","armbar", "armbar", "kimura", "kimura", "heel hook"))
print(type(unique_attacks))
unique_attacks

"""##### Using Sets

One of the most powerful ways to use sets is to find the differences between to collections
"""

attacks_set_one = set(("armbar", "kimura", "heal-hook"))
attacks_set_two = set(("toe-hold", "knee-bar", "heal-hook"))
unique_set_one_attacks = attacks_set_one - attacks_set_two
print(f"Unique Set One Attacks {unique_set_one_attacks}")

"""### Exercise: Write a dictionary with a mutable key."""

good = {'one': 'two'}

# A list is mutable
var = ["two"]
badone = {var:"two"}

# be careful about mutating objects
class Foo:pass
foo = Foo()

bad_two = {foo: "two"}

# try out why this is weird

def fun():pass
bad_three = {fun:"one"}

"""### Presentation: Functions, Lazy Expressions, Async and Concurrency

* [Read related material covered in Chapter 1 (Functions Section) of Pragmatic AI](https://www.safaribooksonline.com/library/view/pragmatic-ai-an/9780134863924/ch01.xhtml#ch01lev1sub17)

* [Watch video section 2:  Writing and Applying Functions](https://www.safaribooksonline.com/videos/essential-machine-learning/9780135261118/9780135261118-EMLA_01_02_00) 

*  **Writing Functions**
*  Function arguments:  positional, keyword
*  Functional Currying:  Passing uncalled functions
*  Functions that Yield
*  Decorators:  Functions that wrap other functions
*  Making Classes Behave Like Functions
*  Applying a Function to a Pandas DataFrame
*  Writing Lambdas

#### Writing Functions
Learning to write a function is the most fundamental skill to learn in Python.  With a basic mastery of functions, it is possible to have an almost full command of the language.

**Simple function**

The simplest functions just return a value.
"""

def favorite_martial_art():
    return "bjj"

print(favorite_martial_art())
# This is the same output
my_variable = "bjj"
my_variable

def myfunc():pass

res = myfunc()
print(res)
#result = myfunc()
#print(result)

"""**Documenting Functions**

It is a very good idea to document functions.  
In Jupyter Notebook and IPython docstrings can be viewed by referring to the function with a ?.  ie.

```
In [2]: favorite_martial_art_with_docstring?
Signature: favorite_martial_art_with_docstring()
Docstring: This function returns the name of my favorite martial art
File:      ~/src/functional_intro_to_python/<ipython-input-1-bef983c31735>
Type:      function
```
"""

def favorite_martial_art_with_docstring():
    """This function returns the name of my favorite martial art
    This is more
    This is even more
    return "string"
    """
    return "bjj"

"""**Docstrings of functions can be printed out by referring to *```__doc__```***"""

#favorite_martial_art_with_docstring.__doc__
favorite_martial_art_with_docstring?

#favorite_martial_art_with_docstring?

"""#### Function arguments: positional, keyword

A function is most useful when arguments are passed to the function. New values for times are processed inside the function. This function is also a 'positional' argument, vs a keyword argument. Positional arguments are processed in the order they are created in.
"""

def practice(times):
    print(f"I like to practice {times} times a day")

practice(2)

practice(3)

"""**Positional Arguments are processed in order**

Note, *position* is the key to pay attention to.
"""

def practice(times, technique, duration):
    print(f"I like to practice {technique}, {times} times a day, for {duration} minutes")

practice(3, "piano", 45)

#Order is important, now the entire is incorrect and prints out nonsense
practice("piano", 7,60)

"""**Keyword Arguments are processed by key, value and can have default values**

One handy feature of keyword arguments is that you can set defaults and only change the defaults you want to change.
"""

def practice(times=2, technique="python", duration=60):
    print(f"I like to practice {technique}, {times} times a day, for {duration} minutes")

practice()

practice(duration=90, times=4)

"""*****args and ****kwargs

allow dynamic argument passing to functions
Should be used with discretion because it can make code hard to understand
"""

def attack_techniques(**kwargs):
    """This accepts any number of keyword arguments"""
    
    for name, attack in kwargs.items():
        print(f"This is an attack I would like to practice: {attack}")

attack_techniques(arm_attack="kimura", 
                  leg_attack="straight_ankle_lock", 
                  neck_attack="arm_triangle",
                 body_attack="charge")

#I also can pass as many things as I wants
attack_techniques(arm_attack="kimura", 
                  leg_attack="straight_ankle_lock", 
                  neck_attach="arm_triangle",
                  attack4="rear nake choke", attack5="key lock")

"""**passing dictionary of keywords to function**

**kwargs syntax can also be used to pass in arguments all at once
"""

attacks = {"arm_attack":"kimura", 
           "leg_attack":"straight_ankle_lock", 
           "neck_attach":"arm_triangle"}

attack_techniques(**attacks)

"""**Passing Around Functions**

Object-Oriented programming is a very popular way to program, but it isn't the only style available in Python. For concurrency and for Data Science, functional programming fits as a complementary style.

In the example, below a function can be used inside of another function by being passed into the function itself as an argument.
"""

def attack_location(technique):
    """Return the location of an attack"""
    
    attacks = {"kimura": "arm_attack",
           "straight_ankle_lock":"leg_attack", 
           "arm_triangle":"neck_attach"}
    if technique in attacks:
        return attacks[technique]
    return "Unknown"

attack_location("kimura")

attack_location("bear hug")

def multiple_attacks(attack_location_function):
    """Takes a function that categorizes attacks and returns location"""
    
    new_attacks_list = ["rear_naked_choke", "americana", "kimura"]
    for attack in new_attacks_list:
        attack_location = attack_location_function(attack)
        print(f"The location of attack {attack} is {attack_location}")

multiple_attacks(attack_location)

"""#### Closures and Functional Currying

Closures are functions that contain other nested functions with state from outer function.

In Python, a common way to use them is to keep track of the state. In the example below, the outer function, attack_counter keeps track of counts of attacks. The inner fuction attack_filter uses the "nonlocal" keyword in Python3, to modify the variable in the outer function.

This approach is called "functional currying". It allows for a specialized function to be created from general functions. As shown below, this style of function could be the basis of a simple video game or maybe for the statistics crew of a mma match.
"""

#nonlocal cannot modify this variable
#lower_body_counter=5
def attack_counter():
    """Counts number of attacks on part of body"""
    lower_body_counter = 0
    upper_body_counter = 0
    #print(lower_body_counter)
    def attack_filter(attack):
        nonlocal lower_body_counter
        nonlocal upper_body_counter
        attacks = {"kimura": "upper_body",
           "straight_ankle_lock":"lower_body", 
           "arm_triangle":"upper_body",
            "keylock": "upper_body",
            "knee_bar": "lower_body"}
        if attack in attacks:
            if attacks[attack] == "upper_body":
                upper_body_counter +=1
            if attacks[attack] == "lower_body":
                lower_body_counter +=1
        print(f"Upper Body Attacks {upper_body_counter}, Lower Body Attacks {lower_body_counter}")
    return attack_filter

fight = attack_counter()

type(fight)

fight("kimura")

fight("knee_bar")

fight("keylock")

"""#### Partial Functions

Useful to partial assign default values to functions
"""

from functools import partial

def multiple_attacks(attack_one, attack_two):
  """Performs two attacks"""
  
  print(f"First Attack {attack_one}")
  print(f"Second Attack {attack_two}")
  
attack_this = partial(multiple_attacks, "kimura")
type(attack_this)

"""By using this partial function, only one argument is needed"""

attack_this("knee-bar")

"""Alternately, the original function can also be called with a different two attacks"""

multiple_attacks("Darce Choke", "Bicep Slicer")

"""#### Lazy Evaluated Functions (Generators)

A very useful style of programming is "lazy evaluation". A generator is an example of that. Generators yield an items at a time.

The example below return an "infinite" random sequence of attacks. The lazy portion comes into play in that while there is an infinite amount of values, they are only returned when the function is called.
"""

def lazy_return_random_attacks():
    """Yield attacks each time"""
    import random
    attacks = {"kimura": "upper_body",
           "straight_ankle_lock":"lower_body", 
           "arm_triangle":"upper_body",
            "keylock": "upper_body",
            "knee_bar": "lower_body"}
    while True:
        random_attack = random.choices(list(attacks.keys()))
        yield random_attack

attack = lazy_return_random_attacks()

type(attack)

for _ in range(6):
    print(next(attack))

"""#### Decorators:   Functions that wrap other functions

##### Randomized Sleep Decorator

Another useful technique in Python is to use the decorator syntax to wrap one function with another function. In the example below, a decorator is written that adds random sleep to each function call. When combined with the previous "infinite" attack generator, it generates random sleeps between each function call.
"""

def randomized_speed_attack_decorator(function):
    """Randomizes the speed of attacks"""
    
    import time
    import random
    
    def wrapper_func(*args, **kwargs):
        sleep_time = random.randint(0,3)
        print(f"Attacking after {sleep_time} seconds")
        time.sleep(sleep_time)
        return function(*args, **kwargs)
    return wrapper_func

@randomized_speed_attack_decorator
def lazy_return_random_attacks():
    """Yield attacks each time"""
    import random
    attacks = {"kimura": "upper_body",
           "straight_ankle_lock":"lower_body", 
           "arm_triangle":"upper_body",
            "keylock": "upper_body",
            "knee_bar": "lower_body"}
    while True:
        random_attack = random.choices(list(attacks.keys()))
        yield random_attack

for _ in range(5):
    print(next(lazy_return_random_attacks()))

"""##### Timing Decorator

Using a decorator to time code is very common
"""

from functools import wraps
from time import time

def timing(f):
    @wraps(f)
    def wrap(*args, **kw):
        ts = time()
        result = f(*args, **kw)
        te = time()
        print(f"fun: {f.__name__}, args: [{args}, {kw}] took: {te-ts} sec")
        return result
    return wrap

"""Using decorator to time execution of a function"""

@timing
def some_attacks(foo):
  print(f"this was passed in: {foo}")
  attack = lazy_return_random_attacks()
  for _ in range(5):
    print(next(attack))
    
some_attacks("bar")

"""#### Making Classes Behave Like Functions

Creating callable functions
"""

class AttackFinder:
  """Finds the attack location"""
  
  
  def __init__(self, attack):
    self.attack = attack
  
  def __call__(self):
    attacks = {"kimura": "upper_body",
           "straight_ankle_lock":"lower_body", 
           "arm_triangle":"upper_body",
            "keylock": "upper_body",
            "knee_bar": "lower_body"}
    if not self.attack in attacks:
      return "unknown location"
    return attacks[self.attack]

my_attack = AttackFinder("kimura")
my_attack()

"""#### Applying Functions to Pandas DataFrames

The final lesson on functions is to take this knowledge and use it on a DataFrame in Pandas. One of the more fundamental concepts in Pandas is use apply on a column vs iterating through all of the values. An example is shown below where all of the numbers are rounded to a whole digit.
"""

import pandas as pd
iris = pd.read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv')
iris.head(3)

iris.shape

iris['rounded_sepal_length'] = iris[['sepal_length']].apply(pd.Series.round)
iris.head()

iris.shape

"""This was done with a built in function, but a custom function can also be written and applied to a column. In the example below, the values are multiplied by 100. The alternative way to accomplish this would be to create a loop, transform the data and then write it back. In Pandas, it is straightforward and simple to apply custom functions instead."""

def multiply_by_100(x):
    """Multiplies by 100"""
    
    res = x * 100
    #print(f"This was passed in {x}, and this result was generated {res}")
    return res
  
  
iris['100x_sepal_length'] = iris[['sepal_length']].apply(multiply_by_100)
iris.head()

iris["new_column"] = iris[['sepal_length']]
iris.head()

iris.groupby("species").max()

#iris.apply(pd.Series.round, axis=1)

#def sepal_category(x):
  
#  if x == 4:
#  return "big"

#iris['sepal_category'] = iris[['sepal_width']].apply(sepal_category)
#iris.head()

#example of a smarter function
def smart_multiply_by_100(x):
  if x > 5:
    return 1
  return x

inputs = [1,2,6,10]
for input in inputs:
  print(smart_multiply_by_100(input))



"""#### Writing Lambdas

Generally considered to be unnecessary.  A Python lambda is an inline python and it can often lead to confusing code.
"""

import this

func = lambda x: x**2
func(4)

def regular_func(x):
  return x**2

regular_func(4)

def regular_func2(x):
  """This makes my variable go to the second power"""
  return x**2

regular_func2(2)



import random

random.seed

"""### Exercise: Write a function that returns infinite values"""

def forever():
    while True:
        yield 1

res = forever()
type(res)

next(res)

#Finite
def not_forever():
    vars = [1,2,3,5]
    for var in vars:
        yield var

res2 = not_forever()

next(res2)

"""### Exercise: Capture the output of a shell command using the ! operator and parse with SList grep"""

!ls -l

directory_listing = !ls -l
type(directory_listing)

directory_listing.grep(".py")

"""## Automating Text and Filesystem

### Presentation: Reading, Writing and Using files: TXT, CSV, and YAML

#### Writing to a file

* *[Watch Video Lesson 6.1:  Use write file operations](https://www.safaribooksonline.com/videos/essential-machine-learning/9780135261118/9780135261118-EMLA_01_06_01)*
"""

f = open('workfile.txt', 'w')
f.write("foo20\n")
f.write("foo3\n")
f.write("foo4\n")
f.close()
!cat workfile.txt

#!ls -l

my_writes = ["foo2\n","foo3\n","foo4\n"]
f = open('workfile2.txt', 'w')
for line in my_writes:
  f.write(line)
f.close()
!cat workfile2.txt

"""#### Writing to a file with 'context'"""

with open("workfile.txt", "w") as workfile:
    workfile.write("bam")
!cat workfile.txt

"""#### Reading a file in

* *[Watch Video Lesson 6.2:  Use read file operations](https://www.safaribooksonline.com/videos/essential-machine-learning/9780135261118/9780135261118-EMLA_01_06_02)*
"""

f = open("workfile.txt", "r")
out = f.readlines() #r.read() works as well
# Maybe we want to create a generator pipeline
for line in out:
  print(line)
  #  yield line
f.close()
print(out)

"""#### Reading a file with 'context'"""

with open("workfile.txt", "r") as workfile:
    print(workfile.readlines())
    #print(workfile.read())

"""#### Serialize a Python Dictionary to Pickle"""

mydict = {"one":1, "two":2}

import pickle

pickle.dump(mydict, open('mydictionary.pickle', 'wb'))

!ls -l mydictionary.pickle

#!cat mydictionary.pickle

res = pickle.load(open('mydictionary.pickle', "rb"))

print(res)

"""#### Serialize a Python Dictionary to JSON"""

import json
with open('data.json', 'w') as outfile:
    json.dump(res, outfile)

!cat data.json

with open('data.json', 'rb') as outfile:
    res2 = json.load(outfile)

print(res2)
type(res2)

"""#### Save to Yaml"""

import yaml

with open("data.yaml", "w") as yamlfile:                                               
    yaml.safe_dump(res2, yamlfile, default_flow_style=False)

!cat data.yaml

"""#### Load Yaml"""

with open("data.yaml", "rb") as yamlfile:                                               
    res3 = yaml.safe_load(yamlfile)

print(res3)
type(res3)

"""### TO DO Protobuff Example

### Exercise: Read and Write a YAML file
"""

new_variable = {"IP_Address": "Hostname"}
with open("hosts.yaml", "w") as yamlfile:
     yaml.safe_dump(new_variable, yamlfile, default_flow_style=False)

!cat hosts.yaml

"""Q: So what is the difference between pickle and json libraries? they seem to do the same thing?![alt text](![alt text](https://))"""

var = {"one":"two"}
pickle.dump(var, open('unreadable.pickle', 'wb'))

!ls -lh unreadable.pickle

with open('var.json', 'w') as outfile:
    json.dump(var, outfile)

!ls -lh var.json

"""Q:  How would you really compare pickle size vs JSON (test it out)..?

### Presentation: Managing files and directories using os.path and pathlib
"""

# Make some dirs
import pathlib
import os

path = "somedir"
#Depending on the script you are writing maybe you want this False
pathlib.Path(path).mkdir(parents=True, exist_ok=True)

ls -la somedir

import pathlib
pathvar = pathlib.Path("newdir")
pathvar2 = pathlib.Path("somedir")

"""Check if path exists?"""

pathvar.exists()

pathvar2.exists()

pathvar.write_text("foo")

cat newdir

"""### Exercise: Use pathlib to rename files"""

from pathlib import Path
p = Path('foo.txt')
p.open('w').write('bam')

#This file is created
print("Before rename")
!ls -l *.txt

out = Path('bar.txt')
p.rename(out)

#It is renamed
print("After rename")
!ls -l *.txt
!rm bar.txt

"""Fnmatch
```python
import fnmatch

files = ["data1.csv", "script.py", "image.png", "data2.csv", "all.py"]


def csv_matches(files):
    '''Return matches for csv files'''

    matches = fnmatch.filter(files, "*.csv")
    return matches


# Print matches to pattern
print(f"Found matches: {csv_matches(files)}")
```

Archive?



```python
from shutil import make_archive
import os

username = "user1"
root_dir = "/tmp"
# archive path
path = f"{root_dir}/{username}"

# create tar and gzipped archive
make_archive(username, "gztar", root_dir)

# create zip archive
make_archive(username, "zip", root_dir)

print(os.listdir("/tmp"))
```

### Presentation: Walking directory trees using os.walk

Example from standard library docs...but lets change.

```python
import os
from os.path import join, getsize
for root, dirs, files in os.walk('somedir'):
    print(root, "consumes", end=" ")
    print(sum(getsize(join(root, name)) for name in files), end=" ")
    print("bytes in", len(files), "non-directory files")
    if 'CVS' in dirs:
        dirs.remove('CVS')  # don't visit CVS directories
```

These are the hooks to walk the file system...
"""

import os
from os.path import join, getsize
for root, dirs, files in os.walk('sample_data'):
    print(f"files I found: {files}")
    #full path
    for name in files:
        full_path = join(root, name)
        print(f"full path to files: {full_path}")

"""### Presentation: Getting stat information on files and directories"""

import os
location = "sample_data/anscombe.json"
result = os.stat(location)

result.st_gid

"""### Subprocess.run

```python
import subprocess
import shlex

print("Enter a list of directories to calculate storage total: \n")
user_input = "pluto mars jupyter"
sanitized_user_input = shlex.split(user_input)
print(f"raw_user_input: {user_input} |  sanitized_user_input: {sanitized_user_input}")
cmd = ["du", "-sh", "--total"]
cmd.extend(sanitized_user_input)
print(f"cmd: {cmd}")
disk_total = subprocess.run(cmd, stdout=subprocess.PIPE)
print(disk_total)
```

# Example health check
```python
import subprocess
import os

# setup
file_location = "/tmp/file.txt"
expected_uid = 501
# touch a file
proc = subprocess.Popen(["touch", file_location])

# check user permissions
stat = os.stat(file_location)
```

### Presentation: Finding files: duplicates, globbing, and patterns

#subprocess find
```python
import subprocess

print("Enter a path to search for directories: \n")
user_input = input()
print(f"user_input: {user_input}")
with subprocess.Popen(
    ["find", user_input, "-type", "d"], stdout=subprocess.PIPE
) as find:
    result = find.stdout.readlines()
    for line in result:
        print(f"Found Directory: {line}")
```
"""

!touch foo.csv && touch bar.txt
import glob
glob.glob("*.csv")

"""### Exercise: Find files using glob"""

path = "sample_data"
results = glob.glob(f"{path}/*.csv")

#how many many CSV did you find?
print(len(results))
results

path = "sample_data"
results = glob.glob(f"{path}/*.json")

#how many many CSV did you find?
print(len(results))
results

"""## Developing with the Command Line

### Presentation: Setting up a Python project with VSCode and pip

### Presentation: Using sys.argv

### Exercise: Write a command-line tool with sys.argv

### Presentation: Using click CLI Framework

### Write a command-line tool with click

Reference:  https://click.palletsprojects.com/en/5.x/quickstart/
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile hello-click.py
# import click
# 
# @click.command()
# def hello():
#     click.echo('Hello World!')
# 
# if __name__ == '__main__':
#     hello()

!python hello-click.py

"""### Presentation: click, subprocess.run, and mixing shell and Python together

## Continuous Integration and Delivery

### Presentation: Creating Makefiles

### Exercise: Create a Makefile

### Presentation: Creating Python virtualenv

### Exercise: Create and use virtualenv

### Presentation: Linting and testing Python code with Pylint and PyTest

### Exercise: Lint code with Pylint

### Presentation: Configuring CircleCI Continuous Integration with Github

### Exercise: Setup github repo to build with CircleCI

### Presentation: What is Continuous Delivery?
"""